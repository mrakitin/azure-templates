jobs:
- job: install_services
  displayName: Install services and needed apt-packages

  variables:
    MPLBACKEND: Qt5Agg
    BS_PROFILE: collection
    TEST_PROFILE: default
    BS_ENV_VERSION: 2019C3.0.1
    _CONDA_CHANNEL: nsls2forge
    OPHYD_CONTROL_LAYER: pyepics

  steps:
  - script: git status
    displayName: check git status
  - script: sudo apt-get install mongodb
    displayName: install mongodb
  - script: sudo systemctl start mongodb && sudo systemctl status mongodb
    displayName: start mongodb
  - script: sudo apt-get install xvfb
    displayName: install xvfb
  # from https://developercommunity.visualstudio.com/content/problem/336288/headless-testing-using-xvfb-on-hosted-ubuntu-1604.html
  - script: /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac -screen 0 1280x1024x16
    displayName: start xvfb
  - script: sudo apt-get install qtbase5-dev
    displayName: install qtbase5-dev

  # TravisCI: before_install
  ##### Common steps #####
  - script: wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    displayName: download miniconda
  - script: sh ./miniconda.sh -b -p ~/mc
    displayName: install miniconda
  - script: source ~/mc/etc/profile.d/conda.sh  # this makes all conda vars available
    displayName: source conda vars
  - script: conda update conda --yes
    displayName: update conda
  # pyOlog config:
  - script: cp -v pyOlog-test.conf ~/pyOlog.conf
    displayName: copy pyOlog config
  # Databroker config:
  - script: mkdir -v -p ~/.config/databroker/ && cp -v databroker.yml ~/.config/databroker/$(git config --get remote.origin.url | awk -F'[/-]' '{print tolower($6)}').yml
    displayName: copy databroker config
  - script: mkdir -v -p ~/.ipython/profile_${TEST_PROFILE}
    displayName: create a profile dir
  ##### Beamline-specific steps #####
  - script: |
      if [ -f .travis-local.sh ]; then
          bash .travis-local.sh
      fi
    displayName: perform beamline-specific actions
  
  # TravisCI: install
  - script: |
      env | sort -u
      conda create -y -n ${BS_PROFILE}-${BS_ENV_VERSION} -c ${_CONDA_CHANNEL} ${BS_PROFILE}=${BS_ENV_VERSION} python=${TRAVIS_PYTHON_VERSION}
      conda activate ${BS_PROFILE}-${BS_ENV_VERSION}
      conda list
      conda info
      conda env list
      echo -e "\n" | caproto-spoof-beamline &
      # Same reason as in https://github.com/bluesky/tutorial/blob/master/binder/postBuild#L14-L15:
      ln -sv caproto-repeater ${CONDA_PREFIX}/bin/caRepeater
      if [ "$OPHYD_CONTROL_LAYER" == "pyepics" ]; then
          connection_timeout='
      import ophyd
      import functools
      ophyd.signal.EpicsSignalBase.wait_for_connection = functools.partialmethod(ophyd.signal.EpicsSignalBase.wait_for_connection, timeout=20)
      print(ophyd.signal.EpicsSignalBase.wait_for_connection.__dict__)'
      fi
      command="${connection_timeout}
      import glob
      ip = get_ipython()
      for f in sorted(glob.glob('startup/*.py')):
          print(f'Executing {f} in TravisCI')
          ip.parent._exec_file(f)"
      echo "$command"
      EPICS_CA_AUTO_ADDR_LIST=NO EPICS_CA_ADDR_LIST=127.0.0.1 ipython --profile=${TEST_PROFILE} -c "$command"
    displayName: create conda env, start caproto IOC and start IPython with startup files
